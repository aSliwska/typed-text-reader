classdef TextSeparator
    methods(Static)
        

        

    end


    methods
        function [resultImage, paragraphs] = separate(obj, originalImage, separatorValues)
            
            % if something goes wrong you'll get zeros 
            % in the separatorValues cell array (but it shouldn't lol)

            % for now it'll be easier for you to edit what you get if you
            % get a whole cell array, but once you tell me exactly what fields
            % you'd like to have, then you won't have to map like this:

            slider1_value = separatorValues{1};
            slider2_value = separatorValues{2};
            dropdown_value = separatorValues{3};
            checkbox_value = separatorValues{4};


            im = imread(originalImage);

            % Przekaż obraz do algorytmu odszumiającego, parametr określa
            % agresję odszumiania
            [imParagraphs, imBinary] = preprocess(im, slider1_value, slider2_value);

            % figure
            % imshow(imParagraphs)

            

            
            
            % figure;
            % imshow(thick)

            % figure
            % imshow(imParagraphs);

            boxes = cat(1,regionprops(imParagraphs, 'BoundingBox').BoundingBox);

      
            % figure;
            
            % Potem dla każdego paragrafu tekstu, pętla

            paragraphData = [];

            for i = 1:size(boxes, 1)

                sprintf("Paragraph: %d", i)
                
                % Wytnij paragraf
                im2 = imcrop(imBinary, boxes(i, :));

                % Przetwarza jeden paragraf tekstu, przyjmuje obraz binarny
                % jako wejscie
    
                [improcess, letterArray, letterFlags] = paragraphProcess(im2);

                if (i == 1)
                    resultImage = improcess;
                    imshow(resultImage);
                end

                paragraph = {};
                paragraph.images = letterArray;
                paragraph.flags = letterFlags;

                paragraph

                paragraphData{end + 1} = paragraph;
                

            end

            paragraphData


            % define return value (should probably return this and a 2d array 
            % of letter images?)
            % resultImage = improcess;
            paragraphs = paragraphData;


            
        end
    end
end